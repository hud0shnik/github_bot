package api

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/hud0shnik/github_bot/internal/telegram"
	"github.com/sirupsen/logrus"
)

// infoResponse - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type infoResponse struct {
	Success       bool   `json:"success"`
	Error         string `json:"error"`
	Username      string `json:"username"`
	Name          string `json:"name"`
	Followers     string `json:"followers"`
	Following     string `json:"following"`
	Repositories  string `json:"repositories"`
	Packages      string `json:"packages"`
	Stars         string `json:"stars"`
	Contributions string `json:"contributions"`
	Avatar        string `json:"avatar"`
}

// commitsResponse - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å
type commitsResponse struct {
	Success  bool   `json:"success"`
	Error    string `json:"error"`
	Date     string `json:"date"`
	Username string `json:"username"`
	Commits  int    `json:"commits"`
	Color    int    `json:"color"`
}

// repoResponse - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
type repoResponse struct {
	Success  bool   `json:"success"`
	Error    string `json:"error"`
	Username string `json:"username"`
	Reponame string `json:"reponame"`
	Commits  string `json:"commits"`
	Branches string `json:"branches"`
	Tags     string `json:"tags"`
	Stars    string `json:"stars"`
	Watching string `json:"watching"`
	Forks    string `json:"forks"`
}

// SendInfo - —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub
func SendInfo(botUrl string, chatId int, username string) {

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
	if username == "" {
		telegram.SendMsg(botUrl, chatId, "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã:\n\n/info <b>[id]</b>\n\n–ü—Ä–∏–º–µ—Ä:\n/info <b>hud0shnik</b>")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GithubStats Api
	resp, err := http.Get("https://githubstatsapi.vercel.app/api/v2/user?type=string&id=" + username)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		telegram.SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		logrus.Printf("http.Get error: %s", err)
		return
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∫–æ–¥–∞
	switch resp.StatusCode {
	case 200:
		// –ü—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å—Ç–∞—Ç—É—Å–µ —Ä–µ—Å–ø–æ–Ω—Å–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
	case 404:
		telegram.SendMsg(botUrl, chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	case 400:
		telegram.SendMsg(botUrl, chatId, "–ü–ª–æ—Ö–æ–π —Ä–µ–∫–≤–µ—Å—Ç")
		return
	default:
		telegram.SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	body, _ := io.ReadAll(resp.Body)
	var user = new(infoResponse)
	json.Unmarshal(body, &user)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	telegram.SendPict(botUrl, chatId, user.Avatar,
		"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>"+user.Username+"</b>:\n"+
			"–ò–º—è "+user.Name+"\n"+
			"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥ <b>"+user.Stars+"</b> ‚≠ê\n"+
			"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ <b>"+user.Followers+"</b> ü§©\n"+
			"–ü–æ–¥–ø–∏—Å–æ–∫ <b>"+user.Following+"</b> üïµÔ∏è\n"+
			"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ <b>"+user.Repositories+"</b> üìò\n"+
			"–ü–∞–∫–µ—Ç–æ–≤ <b>"+user.Packages+"</b> üì¶\n"+
			"–ö–æ–Ω—Ç—Ä–∏–±—É—Ü–∏–π –∑–∞ –≥–æ–¥ <b>"+user.Contributions+"</b> üü©\n"+
			"–ê–≤–∞—Ç–∞—Ä:\n"+user.Avatar)

}

// SendCommits - —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–∏—Ç–æ–≤
func SendCommits(botUrl string, chatId int, username, date string) {

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
	if username == "" {
		telegram.SendMsg(botUrl, chatId, "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã:\n\n/commits <b>[id]</b> <b>[date]</b>\n\n–ü—Ä–∏–º–µ—Ä:\n/commits <b>hud0shnik 2023-02-12</b>\n/commits <b>hud0shnik</b>")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GithubStats Api
	resp, err := http.Get("https://githubstatsapi.vercel.app/api/v2/commits?id=" + username + "&date=" + date)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		telegram.SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		logrus.Printf("http.Get error: %s", err)
		return
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∫–æ–¥–∞
	switch resp.StatusCode {
	case 200:
		// –ü—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å—Ç–∞—Ç—É—Å–µ —Ä–µ—Å–ø–æ–Ω—Å–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
	case 404:
		telegram.SendMsg(botUrl, chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	case 400:
		telegram.SendMsg(botUrl, chatId, "–ü–ª–æ—Ö–æ–π —Ä–µ–∫–≤–µ—Å—Ç")
		return
	default:
		telegram.SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	body, _ := io.ReadAll(resp.Body)
	var user = new(commitsResponse)
	json.Unmarshal(body, &user)

	// –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –º–µ–Ω—è–µ—Ç date –Ω–∞ "—Å–µ–≥–æ–¥–Ω—è"
	if date == "" {
		date = "—Å–µ–≥–æ–¥–Ω—è"
	}

	// –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	switch user.Color {
	case 1:
		telegram.SendMsg(botUrl, chatId, fmt.Sprintf("–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ <i>%s</i> - <b>%d</b>", date, user.Commits))
		telegram.SendStck(botUrl, chatId, "CAACAgIAAxkBAAIYwmG11bAfndI1wciswTEVJUEdgB2jAAI5AAOtZbwUdHz8lasybOojBA")
	case 2:
		telegram.SendMsg(botUrl, chatId, fmt.Sprintf("–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ <i>%s</i> - <b>%d</b>, –Ω–µ–ø–ª–æ—Ö–æ!", date, user.Commits))
		telegram.SendStck(botUrl, chatId, "CAACAgIAAxkBAAIXWmGyDE1aVXGUY6lcjKxx9bOn0JA1AAJOAAOtZbwUIWzOXysr2zwjBA")
	case 3:
		telegram.SendMsg(botUrl, chatId, fmt.Sprintf("–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ <i>%s</i> - <b>%d</b>, –æ—Ç–ª–∏—á–Ω–æ!!", date, user.Commits))
		telegram.SendStck(botUrl, chatId, "CAACAgIAAxkBAAIYymG11mMdODUQUZGsQO97V9O0ZLJCAAJeAAOtZbwUvL_TIkzK-MsjBA")
	case 4:
		telegram.SendMsg(botUrl, chatId, fmt.Sprintf("–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ <i>%s</i> - <b>%d</b>, –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!!!", date, user.Commits))
		telegram.SendStck(botUrl, chatId, "CAACAgIAAxkBAAIXXGGyDFClr69PKZXJo9dlYMbyilXLAAI1AAOtZbwU9aVxXMUw5eAjBA")
	default:
		telegram.SendMsg(botUrl, chatId, "–ö–æ–º–º–∏—Ç–æ–≤ –Ω–µ—Ç...")
		telegram.SendStck(botUrl, chatId, "CAACAgIAAxkBAAIYG2GzRVNm_d_mVDIOaiLXkGukArlTAAJDAAOtZbwU_-iXZG7hfLsjBA")
	}
}

// SendRepo - —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
func SendRepo(botUrl string, chatId int, username, reponame string) {

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	if username == "" || reponame == "" {
		telegram.SendMsg(botUrl, chatId, "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã:\n\n/repo <b>[username]</b> <b>[reponame]</b>\n\n–ü—Ä–∏–º–µ—Ä:\n/repo <b>hud0shnik GithubStatsAPI</b>")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GithubStats Api
	resp, err := http.Get("https://githubstatsapi.vercel.app/api/v2/repo?type=string&username=" + username + "&reponame=" + reponame)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		telegram.SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		logrus.Printf("http.Get error: %s", err)
		return
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∫–æ–¥–∞
	switch resp.StatusCode {
	case 200:
		// –ü—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å—Ç–∞—Ç—É—Å–µ —Ä–µ—Å–ø–æ–Ω—Å–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
	case 404:
		telegram.SendMsg(botUrl, chatId, "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	case 400:
		telegram.SendMsg(botUrl, chatId, "–ü–ª–æ—Ö–æ–π —Ä–µ–∫–≤–µ—Å—Ç")
		return
	default:
		telegram.SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	body, _ := io.ReadAll(resp.Body)
	var repo = new(repoResponse)
	json.Unmarshal(body, &repo)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	telegram.SendMsg(botUrl, chatId, fmt.Sprintf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>%s/%s</b>\n"+
		"–ö–æ–º–º–∏—Ç–æ–≤ <b>%s</b>\n"+
		"–í–µ—Ç–æ–∫ <b>%s</b>\n"+
		"–¢–µ–≥–æ–≤ <b>%s</b>\n"+
		"–ó–≤—ë–∑–¥ <b>%s</b>\n"+
		"–°–ª–µ–¥—è—Ç <b>%s</b>\n"+
		"–§–æ—Ä–∫–æ–≤ <b>%s</b>",
		repo.Username, repo.Reponame, repo.Commits, repo.Branches, repo.Tags, repo.Stars, repo.Watching, repo.Forks))

}
