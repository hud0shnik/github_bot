package mods

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	"github.com/spf13/viper"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API

type TelegramResponse struct {
	Result []Update `json:"result"`
}

type Update struct {
	UpdateId int     `json:"update_id"`
	Message  Message `json:"message"`
}

type Message struct {
	Chat    Chat    `json:"chat"`
	Text    string  `json:"text"`
	Sticker Sticker `json:"sticker"`
}

type Chat struct {
	ChatId int `json:"id"`
}

type Sticker struct {
	File_id string `json:"file_id"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GithubStatsApi

type InfoResponse struct {
	Success       bool   `json:"success"`
	Error         string `json:"error"`
	Username      string `json:"username"`
	Name          string `json:"name"`
	Followers     string `json:"followers"`
	Following     string `json:"following"`
	Repositories  string `json:"repositories"`
	Packages      string `json:"packages"`
	Stars         string `json:"stars"`
	Contributions string `json:"contributions"`
	Avatar        string `json:"avatar"`
}

type CommitsResponse struct {
	Error    string `json:"error"`
	Date     string `json:"date"`
	Username string `json:"username"`
	Commits  int    `json:"commits"`
	Color    int    `json:"color"`
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub
func SendInfo(botUrl string, chatId int, username string) {

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
	if username == "" {
		SendMsg(botUrl, chatId, "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã:\n\n/info <b>[id]</b>\n\n–ü—Ä–∏–º–µ—Ä:\n/info <b>hud0shnik</b>")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
	resp, err := http.Get("https://githubstatsapi.vercel.app/api/user?type=string&id=" + username)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		log.Printf("http.Get error: %s", err)
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var user = new(InfoResponse)
	json.Unmarshal(body, &user)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	if !user.Success {
		SendMsg(botUrl, chatId, user.Error)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	SendPict(botUrl, chatId, user.Avatar,
		"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>"+user.Username+"</b>:\n"+
			"–ò–º—è "+user.Name+"\n"+
			"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥ <b>"+user.Stars+"</b> ‚≠ê\n"+
			"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ <b>"+user.Followers+"</b> ü§©\n"+
			"–ü–æ–¥–ø–∏—Å–æ–∫ <b>"+user.Following+"</b> üïµÔ∏è\n"+
			"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ <b>"+user.Repositories+"</b> üìò\n"+
			"–ü–∞–∫–µ—Ç–æ–≤ <b>"+user.Packages+"</b> üì¶\n"+
			"–ö–æ–Ω—Ç—Ä–∏–±—É—Ü–∏–π –∑–∞ –≥–æ–¥ <b>"+user.Contributions+"</b> üü©\n"+
			"–ê–≤–∞—Ç–∞—Ä:\n"+user.Avatar)
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–∏—Ç–æ–≤
func SendCommits(botUrl string, chatId int, username, date string) {

	// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
	if username == "" {
		username = "hud0shnik"
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–µ–º—É API
	resp, err := http.Get("https://githubstatsapi.vercel.app/api/commits?id=" + username + "&date=" + date)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		log.Printf("http.Get error: %s", err)
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var user = new(CommitsResponse)
	json.Unmarshal(body, &user)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Å–ø–æ–Ω—Å
	if user.Date == "" {
		SendMsg(botUrl, chatId, user.Error)
		return
	}

	// –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –º–µ–Ω—è–µ—Ç date –Ω–∞ "—Å–µ–≥–æ–¥–Ω—è"
	if date == "" {
		date = "—Å–µ–≥–æ–¥–Ω—è"
	}

	// –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	switch user.Color {
	case 1:
		SendMsg(botUrl, chatId, fmt.Sprintf("–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ <i>%s</i> <b>%d</b>", date, user.Commits))
		SendStck(botUrl, chatId, "CAACAgIAAxkBAAIYwmG11bAfndI1wciswTEVJUEdgB2jAAI5AAOtZbwUdHz8lasybOojBA")
	case 2:
		SendMsg(botUrl, chatId, fmt.Sprintf("–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ <i>%s</i> <b>%d</b>, –Ω–µ–ø–ª–æ—Ö–æ!", date, user.Commits))
		SendStck(botUrl, chatId, "CAACAgIAAxkBAAIXWmGyDE1aVXGUY6lcjKxx9bOn0JA1AAJOAAOtZbwUIWzOXysr2zwjBA")
	case 3:
		SendMsg(botUrl, chatId, fmt.Sprintf("–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ <i>%s</i> <b>%d</b>, –æ—Ç–ª–∏—á–Ω–æ!!", date, user.Commits))
		SendStck(botUrl, chatId, "CAACAgIAAxkBAAIYymG11mMdODUQUZGsQO97V9O0ZLJCAAJeAAOtZbwUvL_TIkzK-MsjBA")
	case 4:
		SendMsg(botUrl, chatId, fmt.Sprintf("–ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ <i>%s</i> <b>%d</b>, –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!!!", date, user.Commits))
		SendStck(botUrl, chatId, "CAACAgIAAxkBAAIXXGGyDFClr69PKZXJo9dlYMbyilXLAAI1AAOtZbwU9aVxXMUw5eAjBA")
	default:
		SendMsg(botUrl, chatId, "–ö–æ–º–º–∏—Ç–æ–≤ –Ω–µ—Ç...")
		SendStck(botUrl, chatId, "CAACAgIAAxkBAAIYG2GzRVNm_d_mVDIOaiLXkGukArlTAAJDAAOtZbwU_-iXZG7hfLsjBA")
	}
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
func Help(botUrl string, chatId int) {
	SendMsg(botUrl, chatId, "–ü—Ä–∏–≤–µ—Çüëãüèª, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"+"\n\n"+
		"/commits <u>username</u> <u>date</u> - –∫–æ–º–º–∏—Ç—ã –∑–∞ –¥–µ–Ω—å\n"+
		"/info <u>username</u> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n")
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ (–≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤)
func InitConfig() error {
	viper.AddConfigPath("configs")
	viper.SetConfigName("config")

	return viper.ReadInConfig()
}
